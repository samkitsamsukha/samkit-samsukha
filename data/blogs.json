[
	{
		"id": 3,
		"title": "Can you write CSS?",
		"slug": "css",
		"header": "/blogs/css.png",
		"width": 800,
		"height": 400,
		"description": "With the advent of TailwindCSS, sometimes we must reflect and see if we can still efficiently code webpages using plain CSS.",
		"content": [
			{
				"subheading": "Introduction",
				"paragraph": "I participated in CodeCraze, a web development challenge by the MVJ College of Engineering. This event aimed to test our skills in building webpages using plain HTML & CSS. As someone who primarily uses TailwindCSS, I was intrigued by the challenge. Could I create beautiful, functional designs without relying on utility classes? The answer is a mix of yes and no."
			},
			{
				"subheading": "Challenges Faced",
				"paragraph": "Tailwind, to some extent has spoiled the frontend developer in us. We have become accustomed to its convenience and speed. However, during the challenge, I struggled at first, trying to remember the syntax for flexbox and grid layouts. I missed the ease of Tailwind's responsive classes and color palettes. I wrote <div class=\"flex\"> and then the realization hits that you must do display: \"flex\";"
			},
			{
				"subheading": "Reflection",
				"paragraph": "Taking up this challenge intrigued me to practice writing more CSS. I was able to write keyframes comfortably but still faced issues with media queries. I realized that while Tailwind is a powerful tool, it's essential to understand the underlying CSS concepts. This challenge was a reminder to hone my CSS skills and not rely solely on utility classes. It's like going back to the basics to build a stronger foundation."
			}
		],
		"createdAt": "20th December, 2024"
	},
	{
		"id": 2,
		"title": "First Hand Hackathon Experience",
		"slug": "hackathon-exp",
		"header": "/blogs/nmit.png",
		"width": 800,
		"height": 400,
		"description": "After submitting PPT's to 'n' hackathons, finally got selected for the Quant-A-Maze 2.0 by Nitte Meenakshi Institute of Technology. This was going to be my first hackathon and we",
		"content": [
			{
				"subheading": "Team Dynamics",
				"paragraph": "I was fortunate to be part of a diverse team, cogito-ergo-sum, which essentially means I think, therefore I am, each member bringing unique skills to the table. We had a backend developer, a frontend designer, a blockchain developer and a AI specialist. This diversity sparked lively discussions and helped us approach problems from different angles. Collaboration was key, and we quickly learned to leverage each other's strengths."
			},
			{
				"subheading": "Challenges Faced",
				"paragraph": "As we dove into our project, we encountered several challenges. Technical issues with our code and segmentation faults did spoil the mood. However, these obstacles only fueled our determination. We learned to adapt and pivot our ideas, which ultimately led us to a more innovative solution."
			},
			{
				"subheading": "The Final Pitch",
				"paragraph": "After hours of hard work, it was time to present our project. Standing in front of the judges, I felt a rush of adrenaline. We showcased our solution, highlighting its features and potential impact.Although we could not leave an impact while presenting. and it was gratifying to see our efforts recognized. The experience was invaluable as we got to learn that the presentation is as important as the prototype."
			},
			{
				"subheading": "Reflection",
				"paragraph": "Participating in my first hackathon was a transformative experience. I gained not only technical skills but also insights into teamwork and problem-solving under pressure. It ignited a passion for collaborative innovation that I carry with me to this day. I can't wait for the next hackathon!"
			}
		],
		"createdAt": "20th November, 2024"
	},
	{
		"id": 1,
		"title": "NextJS and Hydration",
		"slug": "nextjs-and-hydration",
		"header": "/blogs/1.png",
		"width": 800,
		"height" : 400,
		"description": "Explore the puzzling yet common issue of hydration faults in Next.js, where server-rendered content struggles to sync seamlessly with the client. This blog delves into the causes, prevention techniques, and effective debugging strategies to keep your applications smooth and error-free.",
		"content": [
			{
				"subheading": "Introduction",
				"paragraph": "Ever opened a Next.js app, only to see it throw a tantrum in the console, complaining about mismatched content? Hydration faults are like that one friend who insists on starting a debate at a dinner party\u2014they\u2019re disruptive and hard to ignore. But don't worry; understanding these quirks can turn you from an annoyed developer into a hydration ninja! \ud83e\udd77"
			},
			{
				"subheading": "Causes of Hydration Faults",
				"paragraph": "Hydration faults occur when the server-rendered HTML doesn't align with what React expects on the client. Common culprits include rendering dynamic content like timestamps or random values during SSR, or mismatched props between server and client. It\u2019s often the result of good intentions gone awry\u2014like trying to make everything dynamic without accounting for lifecycle nuances."
			},
			{
				"subheading": "Preventing Hydration Faults",
				"paragraph": "Prevention is better than cure! Avoid server-side rendering of content that depends on browser-specific data, like 'window' or 'document'. Instead, use conditional rendering or libraries like 'useEffect' for client-side adjustments. Always double-check your Next.js dynamic imports and default props to ensure consistency. Think of it as laying a strong foundation before you build the house."
			},
			{
				"subheading": "Debugging Techniques",
				"paragraph": "Debugging hydration issues requires a meticulous approach. Start by comparing server-rendered and client-rendered DOM structures. Tools like React DevTools can help pinpoint inconsistencies. Look out for warnings like 'Expected server HTML to match client HTML' and address them by isolating problem components. When all else fails, revisit your component logic with fresh eyes\u2014it\u2019s like finding that missing puzzle piece."
			}
		],
		"createdAt": "17th November, 2024"
	}
]